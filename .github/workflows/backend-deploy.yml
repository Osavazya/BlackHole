name: Deploy backend to AWS Lambda

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-deploy.yml'
      - 'requirements*.txt'
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest

    environment:
      name: prod
      url: https://api.blackhole.bond

    concurrency:
      group: prod-backend
      cancel-in-progress: false

    defaults:
      run:
        working-directory: backend

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
      LAYER_ARN: ${{ secrets.LAYER_ARN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Debug OIDC без github-script — просто печатаем клеймы
      - name: Show OIDC claims (debug)
        shell: bash
        run: |
          python - <<'PY'
          import os, json, base64, urllib.request
          url = os.environ['ACTIONS_ID_TOKEN_REQUEST_URL'] + '&audience=sts.amazonaws.com'
          req = urllib.request.Request(url, headers={'Authorization': f"Bearer {os.environ['ACTIONS_ID_TOKEN_REQUEST_TOKEN']}"})
          token = json.loads(urllib.request.urlopen(req).read())['value']
          payload = json.loads(base64.urlsafe_b64decode(token.split('.')[1] + '==').decode())
          print('OIDC sub =', payload.get('sub'))
          print('OIDC repository =', payload.get('repository'))
          print('OIDC repository_owner =', payload.get('repository_owner'))
          print('GITHUB_REF =', os.environ.get('GITHUB_REF'))
          print('GITHUB_EVENT_NAME =', os.environ.get('GITHUB_EVENT_NAME'))
          PY

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install prod deps into ./package
        run: |
          python -m pip install -U pip
          mkdir -p package
          pip install -r requirements.txt -t package
          echo "== psycopg leftovers BEFORE cleanup =="
          ls -1 package | grep -i psycopg || true
          find package -maxdepth 1 \
            \( -iname 'psycopg' -o -iname 'psycopg2' \
               -o -iname 'psycopg*' -o -iname 'psycopg2*' \
               -o -iname '*psycopg*dist-info*' \) \
            -print -exec rm -rf {} +
          echo "== psycopg leftovers AFTER cleanup =="
          ls -1 package | grep -i psycopg || true

      - name: Build ZIP (code + deps)
        run: |
          cp -R app lambda_handler.py package/
          cd package && zip -r ../backend.zip . && cd ..
          ls -lh backend.zip
          if unzip -Z1 backend.zip | grep -qiE '(^|/)(psycopg2?/)/'; then
            echo "Found psycopg runtime package dir in zip — remove it from requirements"; exit 1
          fi

      - name: Who am I
        run: aws sts get-caller-identity

      - name: Update Lambda code (publish new version)
        run: |
          VERSION=$(aws lambda update-function-code \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --zip-file fileb://backend.zip \
            --publish \
            --query 'Version' --output text)
          aws lambda wait function-updated --function-name "$LAMBDA_FUNCTION_NAME"
          echo "Published version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Point alias 'prod' to new version (safe rollback ready)
        run: |
          aws lambda get-alias --function-name "$LAMBDA_FUNCTION_NAME" --name prod >/dev/null 2>&1 \
            && aws lambda update-alias --function-name "$LAMBDA_FUNCTION_NAME" --name prod --function-version "$VERSION" \
            || aws lambda create-alias --function-name "$LAMBDA_FUNCTION_NAME" --name prod --function-version "$VERSION"

      - name: Ensure handler/runtime/layer (optional)
        if: ${{ env.LAYER_ARN != '' }}
        run: |
          aws lambda update-function-configuration \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --handler lambda_handler.handler \
            --runtime python3.12 \
            --layers "$LAYER_ARN" \
            --timeout 30 --memory-size 512

      - name: Warm up (optional)
        run: |
          curl -sS "https://9d8q2oy0y1.execute-api.eu-south-2.amazonaws.com/prod/ping" \
            -H "Origin: https://app.blackhole.bond" >/dev/null || true

