name: Deploy backend to AWS Lambda

on:
  push:
    branches: [ main ]
    paths:
      - "backend/**"
      - ".github/workflows/backend-deploy.yml"
  workflow_dispatch:

jobs:
  deploy:
    name: Build & Deploy
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install prod deps into ./package
        run: |
          python -m pip install -U pip
          mkdir -p package
          pip install -r requirements.txt -t package

          echo "== psycopg leftovers BEFORE cleanup =="
          ls -1 package | grep -i psycopg || true

          # вычищаем все варианты psycopg/psycopg2 + их dist-info
          find package -maxdepth 1 \
            \( -iname 'psycopg' -o -iname 'psycopg2' \
               -o -iname 'psycopg*' -o -iname 'psycopg2*' \
               -o -iname '*psycopg*dist-info*' \) \
            -print -exec rm -rf {} +

          echo "== psycopg leftovers AFTER cleanup =="
          ls -1 package | grep -i psycopg || true

      - name: Build ZIP (code + deps)
        run: |
          cp -R app lambda_handler.py package/
          cd package
          zip -r ../backend.zip .
          cd ..
          ls -lh backend.zip

          # ругаемся только если в zip есть каталоги модулей psycopg/psycopg2
          if unzip -Z1 backend.zip | grep -qiE '(^|/)(psycopg2?/)/'; then
            echo "Found psycopg runtime package dir in zip — remove it from requirements"; exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update Lambda code
        env:
          LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
        run: |
          aws lambda update-function-code \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --zip-file fileb://backend.zip
          aws lambda wait function-updated --function-name "$LAMBDA_FUNCTION_NAME"

      - name: Ensure handler/runtime/layer (optional)
        if: ${{ env.LAYER_ARN != '' }}
        env:
          LAMBDA_FUNCTION_NAME: ${{ secrets.LAMBDA_FUNCTION_NAME }}
          LAYER_ARN: ${{ secrets.LAYER_ARN }}
        run: |
          aws lambda update-function-configuration \
            --function-name "$LAMBDA_FUNCTION_NAME" \
            --handler lambda_handler.handler \
            --runtime python3.12 \
            --layers "$LAYER_ARN" \
            --timeout 30 --memory-size 512

      - name: Warm up (optional)
        run: |
          curl -sS "https://9d8q2oy0y1.execute-api.eu-south-2.amazonaws.com/prod/ping" > /dev/null || true


