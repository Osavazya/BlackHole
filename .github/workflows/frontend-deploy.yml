name: Frontend Deploy (S3 + versions)

on:
  push:
    branches: [ main ]
    paths:
      - "frontend/**"
      - ".github/workflows/frontend-deploy.yml"
      - "package*.json"
  workflow_dispatch:
    inputs:
      promote_version:
        description: "Rollback: SHA релиза из s3://<bucket>/releases/<SHA>/"
        required: false
        type: string

permissions:
  id-token: write
  contents: read

concurrency:
  group: frontend-deploy
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ROLE_ARN:   ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
      BUCKET:     ${{ secrets.S3_BUCKET }}
      CF_DISTRIBUTION_ID: ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }}
      VERSION:    ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: frontend/package-lock.json

      - name: Install deps
        working-directory: frontend
        run: npm ci

      - name: Build (pass API URL from secrets)
        working-directory: frontend
        env:
          VITE_API_URL: ${{ secrets.VITE_API_URL }}
        run: npm run build

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      # ===== Rollback по SHA (без пересборки) =====
      - name: Promote old version (rollback)
        if: ${{ inputs.promote_version != '' }}
        run: |
          set -e
          SHA="${{ inputs.promote_version }}"
          SRC="s3://${BUCKET}/releases/${SHA}/"
          echo "Checking: $SRC"
          aws s3 ls "$SRC" || { echo "No such release: $SRC"; exit 1; }

          # делаем активной папку current/
          aws s3 sync "$SRC" "s3://${BUCKET}/current/" --delete

          # временно дублируем в корень (пока OriginPath CF не /current)
          aws s3 sync "s3://${BUCKET}/current/" "s3://${BUCKET}/" --delete

          # инвалидация
          if [ -n "${CF_DISTRIBUTION_ID}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id "$CF_DISTRIBUTION_ID" \
              --paths "/*"
          fi
          echo "Rollback to $SHA done."

      # ===== Обычный деплой новой версии =====
      - name: Upload release + promote to current
        if: ${{ inputs.promote_version == '' }}
        run: |
          set -e

          # 1) заливаем всё в releases/<sha>/ (статике даём длинный кеш)
          aws s3 sync frontend/dist "s3://${BUCKET}/releases/${VERSION}/" \
            --delete \
            --exclude "index.html" \
            --cache-control "public,max-age=31536000,immutable"

          # 2) index.html отдельно (без кеша)
          aws s3 cp frontend/dist/index.html "s3://${BUCKET}/releases/${VERSION}/index.html" \
            --cache-control "no-cache, no-store, must-revalidate" \
            --content-type "text/html"

          # 3) делаем релиз активным: sync -> current/
          aws s3 sync "s3://${BUCKET}/releases/${VERSION}/" "s3://${BUCKET}/current/" --delete

          # 4) временно дублируем в корень (пока OriginPath CF не /current)
          aws s3 sync "s3://${BUCKET}/current/" "s3://${BUCKET}/" --delete

          # 5) инвалидация
          if [ -n "${CF_DISTRIBUTION_ID}" ]; then
            aws cloudfront create-invalidation \
              --distribution-id "$CF_DISTRIBUTION_ID" \
              --paths "/*"
          fi

          echo "Deployed version: ${VERSION}"
