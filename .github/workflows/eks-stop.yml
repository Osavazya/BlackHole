name: EKS stop (destroy)

on:
  workflow_dispatch:

concurrency:
  group: eks-cluster
  cancel-in-progress: false

jobs:
  stop:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}

    steps:
      - name: Configure AWS (OIDC role)
        if: ${{ secrets.ROLE_TO_ASSUME != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          role-session-name: gha-eks-stop
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS (access keys)
        if: ${{ secrets.ROLE_TO_ASSUME == '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install eksctl
        shell: bash
        run: |
          set -euo pipefail
          curl -sSfL https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_Linux_amd64.tar.gz | tar -xz
          sudo mv eksctl /usr/local/bin/eksctl

      - name: Delete cluster (best effort)
        shell: bash
        run: |
          set -euo pipefail
          if aws eks describe-cluster --name "${EKS_CLUSTER}" --region "${AWS_REGION}" >/dev/null 2>&1; then
            eksctl delete cluster --name "${EKS_CLUSTER}" --region "${AWS_REGION}" --disable-nodegroup-eviction --wait
          else
            echo "Cluster ${EKS_CLUSTER} not found; nothing to delete."
          fi

      # Чистим висячие ALB/TG с префиксом k8s- (на всякий случай)
      - name: Cleanup orphan ALBs & Target Groups
        shell: bash
        run: |
          set -euo pipefail
          lbs=$(aws elbv2 describe-load-balancers --region "${AWS_REGION}" \
                --query "LoadBalancers[?starts_with(LoadBalancerName, 'k8s-')].LoadBalancerArn" \
                --output text || true)
          for arn in $lbs; do
            echo "Deleting LB $arn"
            aws elbv2 delete-load-balancer --region "${AWS_REGION}" --load-balancer-arn "$arn" || true
          done
          tgs=$(aws elbv2 describe-target-groups --region "${AWS_REGION}" \
                --query "TargetGroups[?starts_with(TargetGroupName, 'k8s-')].TargetGroupArn" \
                --output text || true)
          for arn in $tgs; do
            echo "Deleting TG $arn"
            aws elbv2 delete-target-group --region "${AWS_REGION}" --target-group-arn "$arn" || true
          done
